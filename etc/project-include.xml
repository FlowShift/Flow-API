<project name="project-include">

  <!-- figure out the absolute path to this build file -->
  <dirname property="etc.dir" file="${ant.file.project-include}"/>
  <import file="${etc.dir}/flex-include.xml"/>

  <!-- overridable properties -->
  <property name="app.source-suffix" value="as"/>
  <property name="app.source-dir" value="."/>
  <property name="app.package-dir" value="."/>
  <property name="app.library-dir" value="."/>

  <!-- if the user specifies arg.source-extras, build a whole new argument       -->
  <!-- out of it. otherwise just use a dummy value (can't easily skip it, alas). -->
  <condition property="app.source-extras.arg"
             value="-compiler.source-path=${app.source-extras}"
             else="-externs=DummyValueIgnore">
    <isset property="app.source-extras"/>
  </condition>
  <condition property="app.lib-extras.arg"
             value="-library-path+=${app.lib-extras}"
             else="-externs=DummyValueIgnore">
    <isset property="app.lib-extras"/>
  </condition>

  <!-- explains things -->
  <target name="help">
    <echo>The following targets are available:</echo>
    <echo>  ant compile - builds your project</echo>
    <echo>  ant test - builds game projects and runs them in a test environment</echo>
    <echo>  ant -Dplayers=4 test - runs multiple test clients for multiplayer testing</echo>
    <echo>  ant clean - cleans out build resluts</echo>
  </target>

  <!-- builds our SWF file -->
  <target name="compile" depends="prepare-flex">
    <java jar="${flex.path}/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${etc.dir}/whirled-config.xml"/>
      <arg value="-library-path+=${build.root}/dist/lib"/>
      <arg value="-library-path+=${app.library-dir}"/>
      <arg value="-compiler.source-path=${app.source-dir}"/>
      <arg value="${app.source-extras.arg}"/>
      <arg value="${app.lib-extras.arg}"/>
      <arg value="-file-specs"/>
      <arg value="${app.source-dir}/${app.package-dir}/${app.name}.${app.source-suffix}"/>
      <arg value="-output"/>
      <arg value="${app.name}.swf"/>
    </java>
  </target>

  <!-- builds our SWF file in debug mode -->
  <target name="debug" depends="prepare-flex">
    <java jar="${flex.path}/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${etc.dir}/whirled-config.xml"/>
      <arg value="-library-path+=${build.root}/dist/lib"/>
      <arg value="-library-path+=${app.library-dir}"/>
      <arg value="-use-network=${flex.use-network}"/>
      <arg value="-compiler.debug"/>
      <arg value="-compiler.verbose-stacktraces=true"/>
      <arg value="-compiler.source-path=${app.source-dir}"/>
      <arg value="${app.source-extras.arg}"/>
      <arg value="${app.lib-extras.arg}"/>
      <arg value="-file-specs"/>
      <arg value="${app.source-dir}/${app.package-dir}/${app.name}.${app.source-suffix}"/>
      <arg value="-output"/>
      <arg value="${app.name}.swf"/>
    </java>
  </target>

  <target name="asdoc" description="Builds documentation in a 'docs' subdirectory.">
    <mkdir dir="tmp-templates"/>
    <copy todir="tmp-templates">
      <fileset dir="${flex.path}/asdoc/templates" includes="**/*"/>
    </copy>
    <exec executable="chmod" failonerror="true">
      <arg line="a+rx"/>
      <arg line="tmp-templates/asDocHelper.linux"/>
      <arg line="tmp-templates/asDocHelper"/>
    </exec>
    <exec executable="${flex.path}/bin/asdoc" failonerror="true">
      <arg line="-library-path ${build.root}/dist"/>
      <arg line="-library-path ${app.library-dir}"/>
      <arg line="-templates-path tmp-templates"/>
      <arg line="-doc-sources ."/>
      <arg line="-output docs"/>
    </exec>
    <delete dir="tmp-templates"/>
  </target>

  <!-- cleans out the compiled SWF -->
  <target name="clean">
    <delete>
       <fileset file="${app.name}.swf"/>
    </delete>
  </target>

  <!-- a target for building and running the game client -->
  <property name="players" value="1"/>
  <property name="remotePlayers" value="0"/>
  <target name="test" depends="compile,test-only"
    description="Recompiles your project and runs it within the test environment."/>

  <target name="test-debug" depends="debug,test-only"
    description="Recompiles your project (with debugging) and runs it within the test environment."/>

  <target name="test-only">
    <!-- No description. You should use "test" or "test-debug". -->

    <!-- make sure the build.properties file exists -->
    <fail>
      <condition><not><isset property="player.path"/></not></condition>
      Please copy the build.properties.dist file to build.properties in the
      ${build.root} directory and edit the build properties file to point to
      your standalone Flash player.
    </fail>

    <property name="app.type" value="game"/> <!-- default to game if unset -->
    <antcall target="test-${app.type}"/>
  </target>

  <target name="test-avatar">
    <echoxml file="parameters.xml">
    <parameters>
      <param name="avatar" value="file://${app.name}.swf"/>
    </parameters>
    </echoxml>
    <exec executable="${player.path}">
      <arg value="${build.root}/lib/avatarviewer.swf"/>
    </exec>
  </target>

  <target name="test-game">
    <copy file="${app.name}.swf" tofile="${build.root}/dist/game.swf"/>

    <!-- start the server which will start up the clients -->
    <java classname="com.whirled.server.WhirledServer" fork="true">
      <sysproperty key="whirled.root" value="${build.root}"/>
      <sysproperty key="players" value="${players}"/>
      <sysproperty key="remotePlayers" value="${remotePlayers}"/>
      <sysproperty key="party" value="${party}"/>
      <sysproperty key="flash.player" value="${player.path}"/>
      <classpath>
        <fileset dir="${build.root}/dist" includes="whirled-code.jar"/>
        <fileset dir="${build.root}/dist" includes="whirled-data.jar"/>
        <fileset dir="${build.root}/dist/lib" includes="*.jar"/>
      </classpath>
    </java>
  </target>

  <target name="test-furni">
    <!-- TODO: create a furni viewer that emulates the server environ and loads up the
      furni in two flashplayer instances. -->
    <echo>NOTE: furni projects do not currently have a test environment.</echo>
    <exec executable="${player.path}">
      <arg value="${app.name}.swf"/>
    </exec>
  </target>

  <target name="test-toy">
    <!-- TODO: create a toy viewer that emulates the server environ and loads up the
      toy in two flashplayer instances. -->
    <echo>NOTE: toy projects do not currently have a test environment.</echo>
    <exec executable="${player.path}">
      <arg value="${app.name}.swf"/>
    </exec>
  </target>

  <target name="test-pet">
    <!-- TODO: create a pet viewer that emulates the server environ and loads up the
      pet in two flashplayer instances. -->
    <echo>NOTE: pet projects do not currently have a test environment.</echo>
    <exec executable="${player.path}">
      <arg value="${app.name}.swf"/>
    </exec>
  </target>
</project>
