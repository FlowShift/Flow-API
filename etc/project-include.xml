<project name="project-include">

  <!-- figure out the absolute path to this build file -->
  <dirname property="etc.dir" file="${ant.file.project-include}"/>
  <import file="${etc.dir}/flex-include.xml"/>

  <!-- overridable properties -->
  <property name="flex.use-network" value="false"/>
  <property name="app.source-suffix" value="as"/>
  <property name="app.source-dir" value="."/>
  <property name="app.package-dir" value="."/>
  <property name="app.library-dir" value="."/>
  <property name="app.server-agent-package-dir" value="${app.package-dir}"/>
  <property name="app.server-agent" value="Server"/>
  <property name="link-report.file" value="${build.root}/dist/link-report.xml"/>

  <!-- if the user specifies arg.source-extras, build a whole new argument       -->
  <!-- out of it. otherwise just use a dummy value (can't easily skip it, alas). -->
  <condition property="app.source-extras.arg"
             value="-compiler.source-path=${app.source-extras}"
             else="-externs=DummyValueIgnore">
    <isset property="app.source-extras"/>
  </condition>
  <condition property="app.lib-extras.arg"
             value="-library-path+=${app.lib-extras}"
             else="-externs=DummyValueIgnore">
    <isset property="app.lib-extras"/>
  </condition>

  <!-- Likewise, build an arg for an additional flex config, if the user specifies
       app.additional-config -->
  <condition property="app.additional-config.arg"
             value="-load-config+=${app.additional-config}"
             else="-externs=DummyValueIgnore">
    <isset property="app.additional-config"/>
  </condition>

  <!-- explains things -->
  <target name="help">
    <echo>The following targets are available:</echo>
    <echo>  ant compile - builds your project</echo>
    <echo>  ant test - builds game projects and runs them in a test environment</echo>
    <echo>  ant -Dplayers=4 test - runs multiple test clients for multiplayer testing</echo>
    <echo>  ant clean - cleans out build results</echo>
  </target>

  <!-- builds our SWF file -->
  <target name="compile" depends="build,build-server,zip"/>

  <!-- builds our SWF file in debug mode -->
  <target name="debug">
    <property name="flex.debug-arg" value="-compiler.debug"/>
    <antcall target="compile"/>
  </target>

  <!-- handles the heavy lifting for compile/debug -->
  <target name="build" depends="prepare-flex">
    <property name="flex.debug-arg" value="-externs=DummyValueIgnore"/>
    <java jar="${flex.path}/lib/mxmlc.jar" failonerror="true" fork="true" maxmemory="1024M">
      <arg value="-load-config=${etc.dir}/whirled-config.xml"/>
      <arg value="${app.additional-config.arg}"/>
      <arg value="-link-report=${link-report.file}"/>
      <arg value="-library-path+=${build.root}/dist/lib/flexlib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/tweener.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/ooolib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/naryalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/nenyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/vilyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/whirledlib.swc"/>
      <arg value="-library-path+=${app.library-dir}"/>
      <arg value="${flex.debug-arg}"/>
      <arg value="-compiler.headless-server"/>
      <arg value="-compiler.source-path+=${app.source-dir}"/>
      <arg value="-use-network=${flex.use-network}"/>
      <arg value="-compiler.source-path+=${build.root}/contrib/src/as"/>
      <arg value="${app.source-extras.arg}"/>
      <arg value="${app.lib-extras.arg}"/>
      <arg value="-file-specs"/>
      <arg value="${app.source-dir}/${app.package-dir}/${app.name}.${app.source-suffix}"/>
      <arg value="-output"/>
      <arg value="${app.name}.swf"/>
    </java>
  </target>

  <!-- Build our server-side abc file -->
  <target name="build-server" if="app.enable-server-agent">
    <property name="flex.debug-arg" value="-externs=DummyValueIgnore"/>
    <java jar="${flex.path}/lib/mxmlc.jar" failonerror="true" fork="true" maxmemory="1024M">
      <arg value="-load-config=${etc.dir}/thane-config.xml"/>
      <arg value="${app.additional-config.arg}"/>
      <arg value="-external-library-path"/>
      <arg value="${build.root}/dist/lib/thane.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/ooolib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/naryalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/nenyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/vilyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/whirledlib.swc"/>
      <arg value="-library-path+=${app.library-dir}"/>
      <arg value="${flex.debug-arg}"/>
      <arg value="-compiler.source-path+=${app.source-dir}"/>
      <arg value="-use-network=${flex.use-network}"/>
      <arg value="-compiler.source-path+=${build.root}/contrib/src/as"/>
      <arg value="${app.source-extras.arg}"/>
      <arg value="${app.lib-extras.arg}"/>
      <arg value="-file-specs"/>
      <arg value="${app.source-dir}/${app.server-agent-package-dir}/${app.server-agent}.${app.source-suffix}"/>
      <arg value="-output"/>
      <arg value="${app.name}.server.swf"/>
    </java>

    <echo message="Turning .swfs into .abcs..."/>

    <java outputproperty="dump" classname="flash.swf.tools.SwfxPrinter" fork="true" failonerror="true">
      <classpath>
        <fileset dir="${build.root}/dist/lib">
          <include name="swfutils-ooo.jar"/>
          <include name="asc.jar"/>
        </fileset>
      </classpath>
      <arg value="-dump"/>
      <arg value="${app.name}.abc"/>
      <arg value="${app.name}.server.swf"/>
    </java>
    <delete file="${app.name}.server.swf"/>
  </target>

  <!-- zip things up for remixables -->
  <target name="zip" if="app.data-dir">
    <zip destfile="${app.name}.zip" compress="false">
      <!-- Let _data.xml be in either the top-level or the data dir, even though
           we now prefer it to be in the data dir. -->
      <zipfileset dir="." includes="${app.name}.swf, _data.xml"/>
      <zipfileset dir="${app.data-dir}" includes="*" prefix=""/>
    </zip>
    <delete file="${app.name}.swf"/>
  </target>

  <target name="asdoc" description="Builds documentation in a 'docs' subdirectory.">
    <exec executable="${flex.path}/bin/asdoc" failonerror="true">
      <arg line="-library-path ${build.root}/dist"/>
      <arg line="-library-path ${build.root}/dist/lib"/>
      <arg line="-library-path ${app.library-dir}"/>
      <arg line="-library-path+=${app.lib-extras}"/>
      <arg line="-templates-path ${flex.path}/asdoc/templates"/>
      <arg line="-doc-sources ."/>
      <arg line="-output docs"/>
    </exec>
  </target>

  <!-- cleans out the compiled SWF -->
  <target name="clean">
    <delete>
       <fileset file="${app.name}.swf"/>
       <fileset file="${app.name}.abc"/>
       <fileset file="${app.name}.zip"/> <!-- danger? -->
    </delete>
  </target>

  <!-- a target for building and running the game client -->
  <property name="players" value="1"/>
  <property name="remotePlayers" value="0"/>
  <target name="test" depends="compile,test-only"
    description="Recompiles your project and runs it within the test environment."/>

  <target name="test-debug" depends="debug,test-only"
    description="Recompiles your project (with debugging) and runs it within the test environment."/>

  <!-- The Thane binaries have already been unpacked if thanes.tar has not been renamed. -->
  <target name="check-thanes-unpacked">
    <condition property="thanes.unpacked">
      <not><available file="${build.root}/dist/thanes.tar"/></not>
    </condition>
  </target>

  <target name="unpack-thanes" unless="thanes.unpacked" depends="check-thanes-unpacked">
    <!-- unpack the files -->
    <untar src="${build.root}/dist/thanes.tar" dest="${build.root}/dist/bin"/>
    <!-- then mark the fact by renaming the tar file -->
    <move file="${build.root}/dist/thanes.tar" tofile="${build.root}/dist/thanes-unpacked.tar"/>
  </target>

  <target name="test-only" depends="unpack-thanes">
    <!-- No description. You should use "test" or "test-debug". -->

    <!-- make sure the build.properties file exists -->
    <fail>
      <condition><not><isset property="player.path"/></not></condition>
      Please copy the build.properties.dist file to build.properties in the
      ${build.root} directory and edit the build properties file to point to
      your standalone Flash player.
    </fail>

    <!-- if this appears to be a remixable project, the suffix is zip. -->
    <condition property="app.suffix" value="zip" else="swf">
      <isset property="app.data-dir"/>
    </condition>
    <property name="app.type" value="game"/> <!-- default to game if unset -->
    <antcall target="test-${app.type}"/>
  </target>

  <target name="delete-abc" unless="app.enable-server-agent">
    <delete file="${build.root}/dist/game.abc"/>
  </target>

  <target name="copy-abc" if="app.enable-server-agent">
    <copy overwrite="true" file="${app.name}.abc" tofile="${build.root}/dist/game.abc"/>
  </target>

  <target name="test-game" depends="delete-abc,copy-abc">
    <!-- First, detect the CPU architecture; apparently Java uses both amd64 and x86_64 -->
    <condition property="arch" value="64" else="32">
      <or><os arch="amd64"/><os arch="x86_64"/></or>
    </condition>
    <condition property="arch.id" value="Windows-${arch}" else="${os.name}-${arch}">
      <os family="Windows"/>
    </condition>

    <echo>Game name: ${ant.project.name}</echo>

    <!-- then let Windows machines get away with their silly .exe thing -->
    <condition property="thane.path"
               value="${build.root}/dist/bin/${arch.id}/avmthane.exe"
               else="${build.root}/dist/bin/${arch.id}/avmthane">
      <os family="Windows"/>
    </condition>

    <!-- if we're not using the SDK we have to chmod here, this only works in Unix -->
    <chmod file="${thane.path}" perm="ugo+x"/>

    <echo>Thane path: ${thane.path}</echo>

    <copy overwrite="true" file="${app.name}.swf" tofile="${build.root}/dist/game.swf"/>

    <!-- start the server which will start up the clients -->
    <java classname="com.whirled.server.WhirledTestServer" fork="true">
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="whirled.root" value="${build.root}"/>
      <sysproperty key="players" value="${players}"/>
      <sysproperty key="remotePlayers" value="${remotePlayers}"/>
      <sysproperty key="party" value="${party}"/>
      <sysproperty key="flash.player" value="${player.path}"/>
      <sysproperty key="gameName" value="${ant.project.name}"/>

      <!-- stuff to run the agent -->
      <sysproperty key="thane.path" value="${thane.path}"/>
      <sysproperty key="thane.logLevel" value="warn"/>
      <sysproperty key="app.server-agent-package-dir" value="${app.server-agent-package-dir}"/>
      <sysproperty key="app.server-agent" value="${app.server-agent}"/>

      <classpath>
        <fileset dir="${build.root}/dist" includes="whirled-tools.jar"/>
        <fileset dir="${build.root}/dist/lib" includes="*.jar"/>
      </classpath>
    </java>
  </target>

  <target name="test-avatar">
    <copy overwrite="true"
          file="${app.name}.${app.suffix}" tofile="${build.root}/dist/avatar.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="100"/>
      <param name="name" value="${app.name}"/>
      <param name="media" value="file://${build.root}/dist/avatar.${app.suffix}"/>
    </parameters>
    </echoxml>
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-furni">
    <copy overwrite="true"
          file="${app.name}.${app.suffix}" tofile="${build.root}/dist/furni.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="102"/>
      <param name="media" value="file://${build.root}/dist/furni.${app.suffix}"/>
    </parameters>
    </echoxml>
    <!-- TODO: create a furni viewer that emulates the server environ and loads up the
      furni in two flashplayer instances? -->
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-backdrop">
    <copy overwrite="true"
          file="${app.name}.${app.suffix}" tofile="${build.root}/dist/backdrop.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="105"/>
      <param name="media" value="file://${build.root}/dist/backdrop.${app.suffix}"/>
    </parameters>
    </echoxml>
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-toy">
    <copy overwrite="true"
          file="${app.name}.${app.suffix}" tofile="${build.root}/dist/toy.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="103"/>
      <param name="media" value="file://${build.root}/dist/toy.${app.suffix}"/>
    </parameters>
    </echoxml>
    <!-- TODO: create a toy viewer that emulates the server environ and loads up the
      toy in two flashplayer instances? -->
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-pet">
    <copy overwrite="true"
          file="${app.name}.${app.suffix}" tofile="${build.root}/dist/pet.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="101"/>
      <param name="name" value="${app.name}"/>
      <param name="username" value="Fester Bestertester"/>
      <param name="media" value="file://${build.root}/dist/pet.${app.suffix}"/>
    </parameters>
    </echoxml>
    <!-- TODO: create a pet viewer that emulates the server environ and loads up the
      pet in two flashplayer instances? -->
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

    <!-- test the ant task we built by attempting to define it -->
    <target name="define-dependency-task">
        <taskdef name="dependencyanalysis"
            classname="com.threerings.tools.flex.dependency.DependencyAnalysis">
            <classpath>
              <fileset dir="${build.root}/dist/lib">
                <include name="dependency-analyzer-ooo.jar"/>
                <include name="scala-library.jar"/>
              </fileset>
            </classpath>
        </taskdef>
    </target>

    <!-- Analyze for potential dependencies on server side code. -->
    <target name="server-dependencies" depends="define-dependency-task, build">
        <dependencyanalysis
            diagnostic="false"
            trace="false"
            unknown="false"
            linkReport="${link-report.file}"
            root="Server">

            <!-- Fake classes are classes for which we have a server side stub, but not the full -->
            <!-- functionality. -->
            <fake>
                flash.display.DisplayObject
            </fake>

            <!-- Immune classes are allowed to use the fake classes.  -->
            <immune>
                com.whirled.game:GameControl,com.whirled:AbstractControl,
                com.whirled:ServerObject
            </immune>

            <!-- The available set lists the libraries that are available to the server side -->
            <!-- code. -->
            <available dir="/export/whirled/dist/lib">
              <include name="thane.swc"/>
              <include name="flexlib.swc"/>
              <include name="naryalib.swc"/>
              <include name="nenyalib.swc"/>
              <include name="vilyalib.swc"/>
              <include name="whirledlib.swc"/>
            </available>

            <!-- The unavailable set lists libraries that may be used accidentally (because they -->
            <!-- are used by the client, but are not available to server side code.  If these -->
            <!-- overlap with the available set, the available set takes precedence. -->
            <unavailable dir="/export/whirled/dist/lib">
              <include name="flexlib.swc"/>
              <include name="tweener.swc"/>
              <include name="naryalib.swc"/>
              <include name="nenyalib.swc"/>
              <include name="vilyalib.swc"/>
              <include name="whirledlib.swc"/>
            </unavailable>
        </dependencyanalysis>
    </target>
</project>
