<project name="project-include">

  <!-- figure out the absolute path to this build file -->
  <dirname property="etc.dir" file="${ant.file.project-include}"/>
  <import file="${etc.dir}/flex-include.xml"/>

  <!-- overridable properties -->
  <property name="flex.use-network" value="false"/>
  <property name="app.source-suffix" value="as"/>
  <property name="app.source-dir" value="."/>
  <property name="app.package-dir" value="."/>
  <property name="app.library-dir" value="."/>
  <property name="app.server-agent" value="Server"/>
  <property name="app.enabled-server-agent" value="false"/>
  <property name="thane.path" value="${build.root}/dist/lib/avmthane"/>

  <!-- if the user specifies arg.source-extras, build a whole new argument       -->
  <!-- out of it. otherwise just use a dummy value (can't easily skip it, alas). -->
  <condition property="app.source-extras.arg"
             value="-compiler.source-path=${app.source-extras}"
             else="-externs=DummyValueIgnore">
    <isset property="app.source-extras"/>
  </condition>
  <condition property="app.lib-extras.arg"
             value="-library-path+=${app.lib-extras}"
             else="-externs=DummyValueIgnore">
    <isset property="app.lib-extras"/>
  </condition>

  <!-- explains things -->
  <target name="help">
    <echo>The following targets are available:</echo>
    <echo>  ant compile - builds your project</echo>
    <echo>  ant test - builds game projects and runs them in a test environment</echo>
    <echo>  ant -Dplayers=4 test - runs multiple test clients for multiplayer testing</echo>
    <echo>  ant clean - cleans out build resluts</echo>
  </target>

  <!-- builds our SWF file -->
  <target name="compile" depends="build,build-server,zip"/>

  <!-- builds our SWF file in debug mode -->
  <target name="debug">
    <property name="flex.debug-arg" value="-compiler.debug"/>
    <antcall target="compile"/>
  </target>

  <!-- handles the heavy lifting for compile/debug -->
  <target name="build" depends="prepare-flex">
    <property name="flex.debug-arg" value="-externs=DummyValueIgnore"/>
    <java jar="${flex.path}/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${etc.dir}/whirled-config.xml"/>
      <arg value="-library-path+=${build.root}/dist/lib/flexlib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/tweener.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/player-env.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/naryalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/nenyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/vilyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/whirledlib.swc"/>
      <arg value="-library-path+=${app.library-dir}"/>
      <arg value="${flex.debug-arg}"/>
      <arg value="-compiler.source-path=${app.source-dir}"/>
      <arg value="-use-network=${flex.use-network}"/>
      <arg value="-compiler.source-path=${build.root}/contrib/src/as"/>
      <arg value="${app.source-extras.arg}"/>
      <arg value="${app.lib-extras.arg}"/>
      <arg value="-file-specs"/>
      <arg value="${app.source-dir}/${app.package-dir}/${app.name}.${app.source-suffix}"/>
      <arg value="-output"/>
      <arg value="${app.name}.swf"/>
    </java>
  </target>

  <!-- Build our server-side abc file -->
  <target name="build-server" if="app.enable-server-agent">
    <property name="flex.debug-arg" value="-externs=DummyValueIgnore"/>
    <java jar="${flex.path}/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${etc.dir}/thane-config.xml"/>
      <arg value="-external-library-path"/>
      <arg value="${build.root}/dist/lib/thane.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/player-env.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/naryalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/nenyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/vilyalib.swc"/>
      <arg value="-library-path+=${build.root}/dist/lib/whirledlib.swc"/>
      <arg value="-library-path+=${app.library-dir}"/>
      <arg value="${flex.debug-arg}"/>
      <arg value="-compiler.source-path=${app.source-dir}"/>
      <arg value="-use-network=${flex.use-network}"/>
      <arg value="-compiler.source-path=${build.root}/contrib/src/as"/>
      <arg value="${app.source-extras.arg}"/>
      <arg value="${app.lib-extras.arg}"/>
      <arg value="-file-specs"/>
      <arg value="${app.source-dir}/${app.package-dir}/${app.server-agent}.${app.source-suffix}"/>
      <arg value="-output"/>
      <arg value="${app.name}.server.swf"/>
    </java>

    <echo message="Turning .swfs into .abcs..."/>

    <java outputproperty="dump" classname="flash.swf.tools.SwfxPrinter" fork="true" failonerror="true">
      <classpath>
        <fileset dir="${build.root}/dist/lib">
          <include name="swfutils-ooo.jar"/>
          <include name="asc.jar"/>
        </fileset>
      </classpath>
      <arg value="-dump"/>
      <arg value="${app.name}.abc"/>
      <arg value="${app.name}.server.swf"/>
    </java>
    <delete file="${app.name}.server.swf"/>
  </target>

  <!-- zip things up for remixables -->
  <target name="zip" if="app.data-dir">
    <zip destfile="${app.name}.zip" compress="false">
      <!-- Let _data.xml be in either the top-level or the data dir, even though
           we now prefer it to be in the data dir. -->
      <zipfileset dir="." includes="${app.name}.swf, _data.xml"/>
      <zipfileset dir="${app.data-dir}" includes="*" prefix=""/>
    </zip>
    <delete file="${app.name}.swf"/>
  </target>

  <target name="asdoc" description="Builds documentation in a 'docs' subdirectory.">
    <exec executable="${flex.path}/bin/asdoc" failonerror="true">
      <arg line="-library-path ${build.root}/dist"/>
      <arg line="-library-path ${build.root}/dist/lib"/>
      <arg line="-library-path ${app.library-dir}"/>
      <arg line="-library-path+=${app.lib-extras}"/>
      <arg line="-templates-path ${flex.path}/asdoc/templates"/>
      <arg line="-doc-sources ."/>
      <arg line="-output docs"/>
    </exec>
  </target>

  <!-- cleans out the compiled SWF -->
  <target name="clean">
    <delete>
       <fileset file="${app.name}.swf"/>
       <fileset file="${app.name}.zip"/> <!-- danger? -->
    </delete>
  </target>

  <!-- a target for building and running the game client -->
  <property name="players" value="1"/>
  <property name="remotePlayers" value="0"/>
  <target name="test" depends="compile,test-only"
    description="Recompiles your project and runs it within the test environment."/>

  <target name="test-debug" depends="debug,test-only"
    description="Recompiles your project (with debugging) and runs it within the test environment."/>

  <target name="test-only">
    <!-- No description. You should use "test" or "test-debug". -->

    <!-- make sure the build.properties file exists -->
    <fail>
      <condition><not><isset property="player.path"/></not></condition>
      Please copy the build.properties.dist file to build.properties in the
      ${build.root} directory and edit the build properties file to point to
      your standalone Flash player.
    </fail>

    <!-- if this appears to be a remixable project, the suffix is zip. -->
    <condition property="app.suffix" value="zip" else="swf">
      <isset property="app.data-dir"/>
    </condition>
    <property name="app.type" value="game"/> <!-- default to game if unset -->
    <antcall target="test-${app.type}"/>
  </target>

  <target name="delete-abc" unless="app.enable-server-agent">
    <delete file="${build.root}/dist/game.abc"/>
  </target>

  <target name="copy-abc" if="app.enable-server-agent">
    <copy overwrite="true" file="${app.name}.abc" tofile="${build.root}/dist/game.abc"/>
  </target>

  <target name="test-game" depends="delete-abc,copy-abc">
    <copy file="${app.name}.swf" tofile="${build.root}/dist/game.swf"/>

    <!-- start the server which will start up the clients -->
    <java classname="com.whirled.server.WhirledTestServer" fork="true">
      <sysproperty key="whirled.root" value="${build.root}"/>
      <sysproperty key="players" value="${players}"/>
      <sysproperty key="remotePlayers" value="${remotePlayers}"/>
      <sysproperty key="party" value="${party}"/>
      <sysproperty key="flash.player" value="${player.path}"/>
      <sysproperty key="thane.path" value="${thane.path}"/>
      <classpath>
        <fileset dir="${build.root}/dist" includes="whirled-code.jar"/>
        <fileset dir="${build.root}/dist" includes="whirled-data.jar"/>
        <fileset dir="${build.root}/dist/lib" includes="*.jar"/>
      </classpath>
    </java>
  </target>

  <target name="test-avatar">
    <copy file="${app.name}.${app.suffix}" tofile="${build.root}/dist/avatar.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="100"/>
      <param name="name" value="${app.name}"/>
      <param name="media" value="file://${build.root}/dist/avatar.${app.suffix}"/>
    </parameters>
    </echoxml>
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-furni">
    <echo>NOTE: furni projects do not currently have a test environment.</echo>
    <copy file="${app.name}.${app.suffix}" tofile="${build.root}/dist/furni.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="102"/>
      <param name="media" value="file://${build.root}/dist/furni.${app.suffix}"/>
    </parameters>
    </echoxml>
    <!-- TODO: create a furni viewer that emulates the server environ and loads up the
      furni in two flashplayer instances. -->
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-backdrop">
    <echo>NOTE: backdrop projects do not currently have a test environment.</echo>
    <copy file="${app.name}.${app.suffix}" tofile="${build.root}/dist/backdrop.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="199"/> <!-- TODO: to test a decor, we need decor params.. -->
      <param name="media" value="file://${build.root}/dist/backdrop.${app.suffix}"/>
    </parameters>
    </echoxml>
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-toy">
    <echo>NOTE: toy projects do not currently have a test environment.</echo>
    <copy file="${app.name}.${app.suffix}" tofile="${build.root}/dist/toy.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="103"/>
      <param name="media" value="file://${build.root}/dist/toy.${app.suffix}"/>
    </parameters>
    </echoxml>
    <!-- TODO: create a toy viewer that emulates the server environ and loads up the
      toy in two flashplayer instances. -->
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

  <target name="test-pet">
    <copy file="${app.name}.${app.suffix}" tofile="${build.root}/dist/pet.${app.suffix}"/>
    <echoxml file="${build.root}/dist/parameters.xml">
    <parameters>
      <param name="mode" value="101"/>
      <param name="name" value="${app.name}"/>
      <param name="media" value="file://${build.root}/dist/pet.${app.suffix}"/>
    </parameters>
    </echoxml>
    <!-- TODO: create a pet viewer that emulates the server environ and loads up the
      pet in two flashplayer instances. -->
    <exec executable="${player.path}">
      <arg value="${build.root}/dist/viewer.swf"/>
    </exec>
  </target>

</project>
