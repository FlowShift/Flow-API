<!-- build configuration -->
<project name="whirled" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">

  <!-- define some basic project parameters -->
  <property name="app.name"       value="whirled"/>
  <property name="src.dir"        value="src/java"/>
  <property name="asrc.dir"       value="src/as"/>
  <property name="deploy.dir"     value="dist"/>
  <property name="classes.dir"    value="${deploy.dir}/classes"/>
  <property name="sdk.build"      value="${deploy.dir}/sdk/whirled"/>
  <property name="projects.dir"   value="libraries"/>

  <!-- bring in our standard build support -->
  <property name="ooo-build.vers" value="2.5"/>
  <ant antfile="etc/bootstrap.xml"/>
  <import file="${user.home}/.m2/ooo-build/${ooo-build.vers}/ooo-build.xml"/>

  <!-- include bits to do the necessary flex sdk path jockeying -->
<!--
  <import file="etc/flex-include.xml"/>
-->

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <target name="-prepare" depends="-init-ooo">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/tmp"/>
    <mkdir dir="${deploy.dir}/lib"/>
  </target>

  <target name="-prepare-java" depends="-prepare">
    <mavendep pom="pom.xml" path="compile.classpath"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/rsrc"/>
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="-prepare-as" depends="-prepare">
    <mavendep pom="etc/as-pom.xml" pathProp="aslib.path"/>
    <property name="flex.version" value="3.3.0.4852"/>
    <maventaskdef groupId="com.threerings.ant" artifactId="actionscript" version="1.0"/>
    <requireflex/>
  </target>

<!--
  <target name="mavendeps" depends="-prepare"
          description="Fetches our dependencies via Maven.">
    <artifact:dependencies filesetId="as.dependency.fileset">
      <remoteRepository id="as3corelib-repo"
        url="https://github.com/samskivert/as3corelib/raw/master/repository"/>
      <dependency groupId="com.adobe" artifactId="as3corelib" version="0.93" type="swc"/>
      <remoteRepository id="flexlib-repo" url="http://maven.ow2.org/maven2"/>
      <dependency groupId="flexlib" artifactId="flexlib-bin" version="2.4" type="swc"/>
      <remoteRepository id="extooo-repo" url="http://ooo-maven.googlecode.com/hg/repository"/>
      <dependency groupId="caurina" artifactId="tweener" version="1.33.74" type="swc"/>
      <remoteRepository refid="ooo.maven.depends.repo"/>
      <dependency groupId="com.threerings" artifactId="aspirin" version="1.7-SNAPSHOT" type="swc"/>
      <dependency groupId="com.threerings" artifactId="whirledlib" version="1.0" type="swc"/>
      <dependency groupId="com.threerings" artifactId="whirledthanelib" version="1.0" type="swc"/>
      <dependency groupId="com.threerings" artifactId="flashbang" version="1.0-SNAPSHOT"
                  type="swc"/>
      <dependency groupId="com.threerings" artifactId="thane" version="1.0" type="swc"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="as.dependency.fileset"/>
      <chainedmapper>
        <mapper type="flatten"/>
        <mapper type="regexp" from="(.+?)(-SNAPSHOT)?.swc" to="\1.swc"/>
        <mapper type="regexp" from="(.*)-([^-])+.swc" to="\1.swc"/>
      </chainedmapper>
    </copy>

    <artifact:pom id="pom" file="pom.xml"/>
    <artifact:dependencies filesetId="maven.fileset" pomRefId="pom"/>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="maven.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>
-->

  <target name="compile" depends="-prepare-java" description="Compiles java source files.">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="on" optimize="off" deprecation="on"
           target="1.5" includeAntRuntime="false">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="asclient" depends="-prepare-as" description="Compiles Flash test client.">
    <copy file="etc/whirled-config.xml.in" tofile="etc/whirled-config.xml" overwrite="true">
      <filterset>
        <filter token="flex_path" value="${flexsdk.dir}"/>
      </filterset>
    </copy>
    <exec executable="${flexsdk.dir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/whirled-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.library-path+=${aslib.path}"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-incremental=true"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/game-client.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/game.mxml"/>
    </exec>
  </target>

  <target name="asserver" depends="-prepare-as">
    <copy file="etc/thane-config.xml.in" tofile="etc/thane-config.xml" overwrite="true">
      <filterset>
        <filter token="flex_path" value="${flexsdk.dir}"/>
      </filterset>
    </copy>
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/thane-config.xml"/>
      <arg value="-compiler.external-library-path"/>
      <arg value="${deploy.dir}/lib/thane.swc"/>
      <arg value="-compiler.library-path"/>
      <arg value="${deploy.dir}/lib/as3corelib.swc"/>
      <arg value="${deploy.dir}/lib/aspirin.swc"/>
      <arg value="${deploy.dir}/lib/naryalib.swc"/>
      <arg value="${deploy.dir}/lib/nenyalib.swc"/>
      <arg value="${deploy.dir}/lib/vilyalib.swc"/>
      <arg value="${deploy.dir}/lib/whirledlib.swc"/>
      <arg value="${deploy.dir}/lib/whirledthanelib.swc"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/game-server-lib.swc"/>
      <arg value="-compiler.source-path=src/thane"/>
      <arg value="-include-sources=src/as/com/whirled/game"/>
      <arg value="-include-sources=src/thane/com/whirled/thane/WhirledThaneTestClientReferences.as"/>
    </java>

    <!-- link the executable -->
    <java jar="${flexsdk.dir}/lib/mxmlc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/thane-config.xml"/>
      <arg value="-compiler.external-library-path"/>
      <arg value="${deploy.dir}/lib/thane.swc"/>
      <arg value="${deploy.dir}/game-server-lib.swc"/>
      <arg value="-compiler.source-path=src/thane"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/game-server.swf"/>
      <arg value="src/thane/com/whirled/thane/WhirledThaneTestClient.as"/>
    </java>

    <echo message="Turning .swfs into .abcs..."/>

    <path id="swfx.classpath">
      <pathelement location="lib/swfutils-ooo.jar"/>
      <pathelement location="lib/asc.jar"/>
    </path>
    <java outputproperty="dump" classname="flash.swf.tools.SwfxPrinter"
          classpathref="swfx.classpath" fork="true" failonerror="true">
      <arg value="-dump"/>
      <arg value="${deploy.dir}/game-server-lib.abc"/>
      <arg value="${deploy.dir}/game-server-lib.swc"/>
    </java>
    <java outputproperty="dump" classname="flash.swf.tools.SwfxPrinter"
          classpathref="swfx.classpath" fork="true" failonerror="true">
      <arg value="-dump"/>
      <arg value="${deploy.dir}/game-server.abc"/>
      <arg value="${deploy.dir}/game-server.swf"/>
    </java>
  </target>

  <!-- generate docus for our whirled stuff -->
  <target name="asdoc-whirled" depends="-prepare-as">
    <mkdir dir="${sdk.build}/docs"/>
    <delete dir="${deploy.dir}/tmp/pubas"/>
    <copy todir="${deploy.dir}/tmp/pubas">
<!-- TODO: can we ship an aspirin-source Maven artifact?
      <fileset dir="${projects.dir}/aspirin/src/as" includes="com/threerings/**"/>
     OR: how about we just link to the existing aspirin asdocs on the web?
-->
      <fileset dir="${projects.dir}/whirled/src/main/as" includes="com/whirled/*.as"/>
      <fileset dir="${projects.dir}/whirled/src/main/as" includes="com/whirled/game/*.as"/>
      <fileset dir="${projects.dir}/whirled/src/main/as" includes="com/whirled/game/loopback/*.as"/>
      <fileset dir="${projects.dir}/whirled/src/main/as" includes="com/whirled/net/*.as"/>
      <fileset dir="${projects.dir}/whirled/src/main/as" includes="com/whirled/avrg/*.as"/>
      <fileset dir="${projects.dir}/whirled/src/main/as" includes="com/whirled/party/*.as"/>
    </copy>
    <exec executable="${flexsdk.dir}/bin/asdoc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/whirled-config.xml"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-library-path ${deploy.dir}/lib/aspirin.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/naryalib.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/nenyalib.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/whirledlib.swc"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources ${deploy.dir}/tmp/pubas"/>
      <arg line="-load-config+=etc/asdoc-config.xml"/>
      <arg line="-output ${sdk.build}/docs"/>
    </exec>
    <delete dir="${deploy.dir}/tmp/pubas"/>
  </target>

  <!-- generate docs for the contrib stuff -->
  <target name="asdoc-contrib" depends="-prepare-as">
    <mkdir dir="${sdk.build}/contrib/docs"/>
    <delete dir="${deploy.dir}/tmp/pubas"/>
    <copy todir="${deploy.dir}/tmp/pubas">
      <fileset dir="contrib/src/as" includes="com/whirled/**/*.as"
        excludes="com/whirled/contrib/platformer/editor/**/*.as"/>
    </copy>
    <exec executable="${flexsdk.dir}/bin/asdoc" failonerror="true">
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs/air"/>
      <arg line="-library-path ${deploy.dir}/lib/aspirin.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/naryalib.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/nenyalib.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/whirledlib.swc"/>
      <arg line="-library-path ${deploy.dir}/lib/tweener.swc"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources ${deploy.dir}/tmp/pubas"/>
      <arg line="-load-config+=etc/asdoc-contrib-config.xml"/>
      <arg line="-output ${sdk.build}/contrib/docs"/>
    </exec>
    <delete dir="${deploy.dir}/tmp/pubas"/>

    <delete dir="${deploy.dir}/tmp/astemps"/>
  </target>

  <!-- builds all ActionScript documention -->
  <target name="asdoc" depends="asdoc-contrib,asdoc-whirled"/>

  <!-- builds the SDK -->
  <target name="sdk" depends="asclient,asserver,asdoc,just-sdk"/>

  <!-- builds just the SDK; you probably want the "sdk" target -->
  <target name="just-sdk">
    <fail><condition><not><isset property="whirlproj.dir"/></not></condition>
      If you wish to build the SDK, you must specify the path a checkout of the
      http://code.google.com/p/whirled/ repository, so that certain example
      projects can be copied into the SDK: -Dwhirlproj.dir=/path/to/whirled
    </fail>
    <mkdir dir="${sdk.build}"/>
    <copy todir="${sdk.build}">
      <fileset dir="data/sdk" includes="**"/>
    </copy>
    <mkdir dir="${sdk.build}/dist"/>
    <copy todir="${sdk.build}/dist">
     <fileset dir="${deploy.dir}">
       <include name="game-client.swf"/>
       <include name="whirled-tools.jar"/>
       <include name="game-server.abc"/>
       <include name="game-server-lib.abc"/>
       <include name="lib/**"/>
     </fileset>
     <fileset dir="lib">
       <include name="viewer.swf"/>
       <include name="default-avatar.swf"/>
       <include name="testing-furni.swf"/>
     </fileset>
    </copy>
    <mkdir dir="${sdk.build}/lib"/>
    <copy todir="${sdk.build}">
<!-- TODO: why do these source files need to be included in the SDK?
      <fileset dir="${projects.dir}/aspirin">
        <include name="src/as/com/threerings/**"/>
      </fileset>
      <fileset dir="${projects.dir}/narya">
        <include name="src/main/as/com/threerings/util/**"/>
        <exclude name="**/Streamable*.as"/>
        <exclude name="**/Name.as"/>
        <exclude name="**/langBoolean.as"/>
        <exclude name="**/ObjectMarshaller.as"/>
      </fileset>
-->
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/avrg/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/party/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/avrg/server/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/game/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/game/loopback/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/net/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/com/whirled/net/impl/*.as"/>
      <fileset dir="${projects.dir}/whirled" includes="src/main/as/nochump/**"/>
      <fileset dir="." includes="etc/**" excludes="etc/whirled-config.xml"/>
    </copy>
    <!-- copy contributed files -->
    <mkdir dir="${sdk.build}/contrib"/>
    <copy todir="${sdk.build}/contrib">
      <fileset dir="contrib" includes="README.txt,src/as/com/whirled/contrib/**"/>
    </copy>
    <!-- copy some example games -->
    <mkdir dir="${sdk.build}/examples/games"/>
    <copy todir="${sdk.build}/examples/games">
      <fileset dir="${whirlproj.dir}/games" includes="reversi/**"/>
      <fileset dir="${whirlproj.dir}/games" includes="fat_reversi/**"/>
      <fileset dir="${whirlproj.dir}/games" includes="clickfest/**"/>
      <fileset dir="${whirlproj.dir}/games" includes="quickclick/**"/>
      <fileset dir="${whirlproj.dir}/games" includes="tictactoe/**"/>
    </copy>
    <!-- copy some example pets and the urpet -->
    <mkdir dir="${sdk.build}/examples/pets"/>
    <copy todir="${sdk.build}/examples/pets">
      <fileset dir="${whirlproj.dir}/pets" includes="urpet/**"/>
      <fileset dir="${whirlproj.dir}/pets" includes="hal/**"/>
      <fileset dir="${whirlproj.dir}/pets" includes="FATexample/**"/>
    </copy>
    <!-- copy some example avatars and the uravatar -->
    <mkdir dir="${sdk.build}/examples/avatars"/>
    <copy todir="${sdk.build}/examples/avatars">
      <fileset dir="${whirlproj.dir}/avatars" includes="uravatar/**"/>
      <fileset dir="${whirlproj.dir}/avatars" includes="imageflipper/**"/>
      <fileset dir="${whirlproj.dir}/avatars" includes="imageflipper-remix/**"/>
      <fileset dir="${whirlproj.dir}/avatars" includes="camvatar/**"/>
      <fileset dir="${whirlproj.dir}/avatars" includes="FATexample/**"/>
    </copy>

    <!-- put our thane binaries into a tar file -->
<!-- TODO: get these from a Maven artifact
    <tar destfile="${sdk.build}/dist/thanes.tar">
      <TarFileSet dir="libraries/thane-bin">
        <include name="Windows-32/avmthane.exe"/>
        <include name="Mac OS X-32/avmthane"/>
        <include name="Linux-32/avmthane"/>
      </TarFileSet>
    </tar>
-->
    <zip destfile="${deploy.dir}/whirled_sdk.zip"
         basedir="${deploy.dir}/sdk" includes="whirled/**"/>
  </target>

  <!-- runs the FAT test server -->
  <target name="testfat">
    <!-- start the server which will start up the clients -->
    <java classname="com.whirled.server.FATControlPanel" fork="true">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
        <fileset dir="${deploy.dir}" includes="whirled-data.jar"/>
      </classpath>
    </java>
  </target>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="compile">
    <jar file="${deploy.dir}/${app.name}-tools.jar" basedir="${classes.dir}" includes="com/**"/>
    <copy file="lib/viewer.swf" todir="${deploy.dir}"/>
    <copy file="lib/default-avatar.swf" todir="${deploy.dir}"/>
    <copy file="lib/testing-furni.swf" todir="${deploy.dir}"/>

<!-- TEMP: we need to publish these as a Maven artifact
    <mkdir dir="${deploy.dir}/bin"/>
    <copy todir="${deploy.dir}/bin" overwrite="true">
      <fileset dir="libraries/thane-bin" includes="**/avmthane*"/>
    </copy>
-->
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="dist,asclient,asserver">
  </target>

  <!-- cleans out the compilation results -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes"/>
  </target>

  <!-- fully cleans out the application -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distclean"/>

</project>
