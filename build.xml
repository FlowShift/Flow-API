<!-- build configuration -->
<project name="whirled" default="compile" basedir=".">

  <!-- define some basic project parameters -->
  <property name="app.name"    value="whirled"/>
  <property name="src.dir"     value="src/java"/>
  <property name="asrc.dir"    value="src/as"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>
  <property name="javadoc.dir" value="${deploy.dir}/docs"/>
  <property name="savedoc.dir" value="docs"/>
  <property name="sdk.build"   value="${deploy.dir}/sdk/whirled"/>

  <!-- define our subprojects and include the standard build system -->
  <property name="projects.dir"  value="libraries"/>
  <property name="projects" value="samskivert,narya,nenya,vilya,toybox"/>
  <import file="build/etc/build-support.xml"/>

  <!-- include bits to do the necessary Flex SDK path jockeying -->
  <import file="etc/flex-include.xml"/>

  <!-- declares the libraries needed by the Whirled runtime -->
  <filelist dir="." id="dist.libs">
    <file name="lib/ant.jar"/>
    <file name="lib/ant-launcher.jar"/>
    <file name="lib/commons-beanutils.jar"/>
    <file name="lib/commons-collections.jar"/>
    <file name="lib/commons-digester.jar"/>
    <file name="lib/commons-io.jar"/>
    <file name="lib/commons-lang.jar"/>
    <file name="lib/commons-logging.jar"/>
    <file name="lib/getdown.jar"/>
    <file name="lib/javassist.jar"/>
    <file name="lib/jetty.jar"/>
    <file name="lib/jetty-util.jar"/>
    <file name="lib/junit-3.7.jar"/>
    <file name="lib/junit4.jar"/>
    <file name="lib/lwjgl.jar"/>
    <file name="lib/servlet-api.jar"/>
    <file name="lib/velocity-1.5-dev.jar"/>
  </filelist>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <!-- prepares the build directories -->
  <target name="prepare" depends="copydistlibs">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/tmp"/>
    <mkdir dir="${deploy.dir}/lib"/>
  </target>

  <!-- prepares the java bits -->
  <target name="prepare-java" depends="prepare">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/rsrc"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- builds our whirled.swc Flash library -->
  <target name="aslib" unless="aslib_is_up_to_date" depends="prepare,prepare-flex,checkaslib">
    <!-- build the version for clients to build against -->
    <java jar="${flex.path}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/whirled-config.xml"/>
      <arg value="-external-library-path"/>
      <arg value="${flex.path}/frameworks/libs"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${projects.dir}/narya/src/as/"/>
      <arg value="-compiler.source-path=${projects.dir}/nenya/src/as/"/>
      <arg value="-compiler.source-path=${projects.dir}/vilya/src/as/"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-include-sources=${projects.dir}/narya/src/as/"/>
      <arg value="-include-sources=${projects.dir}/nenya/src/as/com/threerings/flash/"/>
      <arg value="-include-sources=${projects.dir}/vilya/src/as/com/threerings/parlor/"/>
      <arg value="-include-sources=${projects.dir}/vilya/src/as/com/threerings/ezgame/"/>
      <arg value="-include-sources=${asrc.dir}/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/whirled.swc"/>
    </java>
  </target>

  <!-- builds our Flash game test client without checking dependencies -->
  <target name="asquick">
    <exec executable="${flex.path}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/whirled-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-incremental=true"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/game-client.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/game.mxml"/>
    </exec>
  </target>

  <!-- builds our Flash game test client -->
  <target name="asclient" depends="aslib,asquick"/>

  <!-- builds the ActionScript documention -->
  <target name="asdoc">
    <mkdir dir="${sdk.build}/docs"/>
    <!-- we need to generate docs just for the public facing stuff, so we do this hackery -->
    <mkdir dir="${deploy.dir}/tmp/pubas"/>
    <copy todir="${deploy.dir}/tmp/pubas">
      <fileset dir="${projects.dir}/narya/src/as/com/threerings/util" includes="*.as"/>
      <fileset dir="${projects.dir}/vilya/src/as/com/threerings/ezgame" includes="*.as"/>
      <fileset dir="src/as/com/whirled" includes="*.as"/>
    </copy>
    <java classpath="${flex.path}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCashes=false"/>
      <jvmarg value="-Xbootclasspath/p:${flex.path}/asdoc/lib/xalan.jar"/>
      <jvmarg value="-Dos.name=Windows"/>
      <arg value="+flexlib=${flex.path}/frameworks"/>
      <arg line="-library-path ${flex.path}/frameworks/libs"/>
      <arg line="-library-path ${deploy.dir}/whirled.swc"/>
      <arg line="-templates-path ${flex.path}/asdoc/templates"/>
      <arg line="-doc-sources ${deploy.dir}/tmp/pubas"/>
      <arg line="-output ${sdk.build}/docs"/>
    </java>
    <delete dir="${deploy.dir}/tmp/pubas"/>
  </target>

  <!-- builds the SDK -->
  <target name="sdk" depends="aslib,asclient,dist,asdoc">
    <mkdir dir="${sdk.build}"/>
    <copy todir="${sdk.build}">
      <fileset dir="data/sdk" includes="**"/>
    </copy>
    <mkdir dir="${sdk.build}/dist"/>
    <copy todir="${sdk.build}/dist">
     <fileset dir="${deploy.dir}">
       <include name="whirled.swc"/>
       <include name="whirled-*.jar"/>
       <include name="game-client.swf"/>
       <include name="lib/**"/>
     </fileset>
    </copy>
    <mkdir dir="${sdk.build}/lib"/>
    <copy todir="${sdk.build}">
      <fileset dir="." includes="src/as/com/whirled/**" excludes="**/WorldGameControl.as"/>
      <fileset dir="${projects.dir}/vilya" includes="src/as/com/threerings/ezgame/*.as"/>
      <fileset dir="${projects.dir}/narya" includes="src/as/com/threerings/util/*.as"/>
      <fileset dir="${projects.dir}/narya" includes="src/as/Log.as"/>
      <fileset dir="." includes="etc/**" excludes="etc/whirled-config.xml"/>
    </copy>
    <!-- copy some example games -->
    <mkdir dir="${sdk.build}/examples/games"/>
    <copy todir="${sdk.build}/examples/games">
      <fileset dir="projects/games" includes="reversi/**"/>
      <fileset dir="projects/games" includes="fat_reversi/**"/>
    </copy>
    <!-- copy some example pets and the urpet -->
    <mkdir dir="${sdk.build}/examples/pets"/>
    <copy todir="${sdk.build}/examples/pets">
      <fileset dir="projects/pets" includes="urpet/**"/>
      <fileset dir="projects/pets" includes="hal/**"/>
    </copy>
    <!-- copy some example avatars and the uravatar -->
    <mkdir dir="${sdk.build}/examples/avatars"/>
    <copy todir="${sdk.build}/examples/avatars">
      <fileset dir="projects/avatars" includes="uravatar/**"/>
      <fileset dir="projects/avatars" includes="fairy/**"/>
    </copy>
    <!-- finally zip it all up -->
    <zip destfile="${deploy.dir}/whirled_sdk.zip"
         basedir="${deploy.dir}/sdk" includes="whirled/**"/>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare"> 
    <taskdef name="dobj" classpathref="classpath"
             classname="com.threerings.presents.tools.GenDObjectTask"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false" debug="on"
           optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation service declarations -->
  <target name="genservice" depends="prepare-java">
    <taskdef name="service" classpathref="classpath"
             classname="com.threerings.presents.tools.GenServiceTask"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="on" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" asroot="${asrc.dir}" classpathref="classpath">
      <fileset dir="${src.dir}">
        <include name="**/*Service.java"/>
      </fileset>
    </service>
  </target>

  <!-- generates ActionScript versions of our Streamable classes -->
  <target name="genascript" depends="dist">
    <taskdef name="genscript" classpathref="classpath"
             classname="com.threerings.presents.tools.GenActionScriptTask"/>
    <!-- now generate the associated files -->
    <genscript header="lib/SOURCE_HEADER" asroot="${asrc.dir}">
      <fileset dir="${src.dir}">
        <include name="**/whirled/data/*.java"/>
      </fileset>
    </genscript>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare-java">
    <javac srcdir="${src.dir}" destdir="${classes.dir}"
           debug="on" optimize="off" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- builds the javadoc documentation -->
  <target name="javadoc" depends="prepare-java">
    <property name="copy.holder"  value="Three Rings Design, Inc."/>
    <javadoc windowtitle="${app.name} API" doctitle="${app.name} API"
             bottom="Copyright &#169; 2006-2007 ${copy.holder}. All Rights Reserved."
             destdir="${javadoc.dir}" additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://samskivert.com/code/samskivert/samskivert/docs/api"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </javadoc>
  </target>

  <!-- builds and tests the FAT test server -->
  <target name="testfat" depends="compile">
    <!-- start the server which will start up the clients -->
    <java classname="com.whirled.server.FATControlPanel" fork="true">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
        <fileset dir="${deploy.dir}" includes="whirled-data.jar"/>
      </classpath>
    </java>
  </target>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="compile">
    <!-- stick all our code in one jar file -->
    <jar file="${deploy.dir}/${app.name}-code.jar" basedir="${classes.dir}">
      <include name="com/**"/>
      <include name="*.properties"/>
      <include name="rsrc/**/*.properties"/>
      <include name="rsrc/**/*.tmpl"/>
    </jar>
    <!-- and all of our configuration and media in another -->
    <jar file="${deploy.dir}/${app.name}-media.jar" basedir="${classes.dir}" includes="rsrc/**"/>
    <!-- and our server-only data in yet another -->
    <jar file="${deploy.dir}/${app.name}-data.jar" basedir="." includes="data/dictionary/**"/>
  </target>

  <!-- a target for rebuilding the top-level project (but not subprojects) -->
  <target name="all" depends="prepare,compile,javadoc,dist"/>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="prepare,distprojects,dist,sdk">
  </target>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${classes.dir}"/>
    <delete><fileset dir="${asrc.dir}" includes="*.cache"/></delete>
    <delete><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
    <delete><fileset dir="${deploy.dir}" includes="*.swc"/></delete>
  </target>

  <!-- fully cleans out the application -->
  <target name="distclean" depends="clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distcleanprojects,distclean"/>

</project>
